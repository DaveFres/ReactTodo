{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isEditing","task","handleRemove","bind","assertThisInitialized","toggleForm","handleChange","handleUpdate","handleToggle","removeTodo","id","setState","evt","preventDefault","updateTodo","defineProperty","target","name","value","toggleTodo","react_default","a","createElement","className","onSubmit","type","onChange","completed","onClick","Component","NewTodoForm","handleSubmit","createTodo","objectSpread","uuid","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleCompletion","newTodo","concat","toConsumableArray","filter","t","updatedTask","updatedTodos","map","todo","_this2","src_Todo_0","key","src_NewTodoForm_0","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7403e5a4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Todo.css\";\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            task: this.props.task\n        };\n        this.handleRemove = this.handleRemove.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n\n    handleRemove() {\n        this.props.removeTodo(this.props.id);\n    }\n\n    toggleForm() {\n        this.setState({\n            isEditing: !this.state.isEditing\n        });\n    }\n\n    handleUpdate(evt) {\n        evt.preventDefault();\n        this.props.updateTodo(this.props.id, this.state.task);\n        this.setState({\n            isEditing: false\n        });\n    }\n\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n\n    handleToggle(evt) {\n        this.props.toggleTodo(this.props.id);\n    }\n\n    render() {\n        let result;\n\n        if (this.state.isEditing) {\n            result = (\n                <div className=\"Todo\">\n                    <form\n                        className=\"Todo-edit-form\"\n                        onSubmit={this.handleUpdate}\n                    >\n                        <input\n                            type=\"text\"\n                            value={this.state.task}\n                            name=\"task\"\n                            onChange={this.handleChange}\n                        />\n                        <button>Save</button>\n                    </form>\n                </div>\n            );\n        } else {\n            result = (\n                <div\n                    className={\n                        this.props.completed ? \"Todo Todo-completed\" : \"Todo\"\n                    }\n                >\n                    <li\n                        className={\n                            this.props.completed\n                                ? \"Todo-task completed\"\n                                : \"Todo-task\"\n                        }\n                        onClick={this.handleToggle}\n                    >\n                        {this.props.task}\n                    </li>\n                    <div className=\"Todo-buttons\">\n                        <button onClick={this.toggleForm}>\n                            <i className=\"fas fa-pen\" />\n                        </button>\n                        <button onClick={this.handleRemove}>\n                            <i className=\"fas fa-trash\" />\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n\n        return result;\n    }\n}\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport uuid from \"uuid/v4\";\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            task: \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n\n    handleSubmit(evt) {\n        evt.preventDefault();\n        this.props.createTodo({ ...this.state, id: uuid(), completed: false });\n        this.setState({\n            task: \"\"\n        });\n    }\n\n    render() {\n        return (\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"task\">New Todo: </label>\n                <input\n                    id=\"task\"\n                    type=\"text\"\n                    placeholder=\"New Todo\"\n                    value={this.state.task}\n                    onChange={this.handleChange}\n                    name=\"task\"\n                />\n                <button>Add Todo</button>\n            </form>\n        );\n    }\n}\n\nexport default NewTodoForm;\n","import React, { Component } from \"react\";\nimport Todo from \"./Todo\";\nimport NewTodoForm from \"./NewTodoForm\";\nimport './TodoList.css';\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todos: []\n        };\n        this.create = this.create.bind(this);\n        this.remove = this.remove.bind(this);\n        this.update = this.update.bind(this);\n        this.toggleCompletion = this.toggleCompletion.bind(this);\n    }\n\n    create(newTodo) {\n        this.setState({\n            todos: [...this.state.todos, newTodo]\n        });\n    }\n\n    remove(id) {\n        this.setState({\n            todos: this.state.todos.filter(t => t.id !== id)\n        });\n    }\n\n    update(id, updatedTask) {\n        const updatedTodos = this.state.todos.map(todo => {\n            if (todo.id === id) {\n                return { ...todo, task: updatedTask };\n            }\n            return todo;\n        });\n        this.setState({\n            todos: updatedTodos\n        });\n    }\n\n    toggleCompletion(id) {\n        const updatedTodos = this.state.todos.map(todo => {\n            if (todo.id === id) {\n                return { ...todo, completed: !todo.completed };\n            }\n            return todo;\n        });\n        this.setState({\n            todos: updatedTodos\n        });\n    }\n\n    render() {\n        const todos = this.state.todos.map(todo => (\n            <Todo\n                key={todo.id}\n                id={todo.id}\n                task={todo.task}\n                completed={todo.completed}\n                removeTodo={this.remove}\n                updateTodo={this.update}\n                toggleTodo={this.toggleCompletion}\n            />\n        ));\n        return (\n            <div className=\"TodoList\">\n                <h1>Todo List! <span>A Simple React Todo List App.</span></h1>\n                <ul>{todos}</ul>\n                <NewTodoForm createTodo={this.create} />\n            </div>\n        );\n    }\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport TodoList from \"./TodoList\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div>\n            <TodoList />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}